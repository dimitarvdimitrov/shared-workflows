name: Login to artifact registry
description: Composite action to push to Google Artifact Registry
inputs:
  registry:
    description: |
      Google Artifact Registry to authenticate against.
    default: "us-docker.pkg.dev"
  environment:
    description: |
      Environment for pushing artifacts (can be either dev or prod).
    default: dev
  delete_credentials_file:
    description: |
      Delete the credentials file after the action is finished. 
      If you want to keep the credentials file for a later step, set this to false.
    default: "false"

runs:
  using: composite
  steps:
    - name: Construct service account
      id: construct-service-account
      shell: sh
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        SERVICE_ACCOUNT="github-${{ github.repository_id }}-${ENVIRONMENT}@grafanalabs-workload-identity.iam.gserviceaccount.com"
        echo "service_account=${SERVICE_ACCOUNT}" | tee -a "${GITHUB_OUTPUT}"
    # if service account exists, then authenticate using the service account
    - uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      name: Auth with service account
      id: auth_with_service_account
      with:
        token_format: access_token
        workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
        service_account: ${{ steps.construct-service-account.outputs.service_account }}
      continue-on-error: true
    - name: Service account deprecation warning
      if: ${{ steps.auth_with_service_account.outputs.access_token != '' }}
      shell: sh
      run: |
        echo "::warning::Warning: Authenticating with a Service Account is going to be deprecated on April 30. \
        If you don't want to be affected by this change, either pin your action according to \
        https://github.com/grafana/shared-workflows/blob/main/actions/login-to-gar/README.md or go to your repository config \
        and stop using Service Accounts."
    # authenticate using the access_token from the auth_with_service_account step
    # need to create a cache directory since we don't checkout any code
    - name: Create cache directory
      if: ${{ steps.auth_with_service_account.outputs.access_token != '' }}
      shell: sh
      run: mkdir -p ${{ github.workspace }}/.cache/google-cloud-sdk
    - name: Login to GAR
      if: ${{ steps.auth_with_service_account.outputs.access_token != '' }}
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ inputs.registry }}
        username: oauth2accesstoken
        password: ${{ steps.auth_with_service_account.outputs.access_token }}
    # if service account doesn't exist, then authenticate using direct workload identity federation
    - uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      if: ${{ steps.auth_with_service_account.outputs.access_token == '' }}
      name: Auth with direct WIF
      id: auth_with_direct_wif
      with:
        project_id: "grafanalabs-workload-identity"
        workload_identity_provider: "projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider"
    - name: "Cache Cloud SDK"
      if: ${{ steps.auth_with_service_account.outputs.access_token == '' }}
      id: cache-cloud-sdk
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: ${{ github.workspace }}/.cache/google-cloud-sdk
        key: ${{ runner.os }}-gcloud-${{ hashFiles('actions/login-to-gar/action.yaml') }}
        restore-keys: ${{ runner.os }}-gcloud-
    - name: "Set up Cloud SDK"
      if: ${{ steps.cache-cloud-sdk.outputs.cache-hit != 'true' && steps.auth_with_service_account.outputs.access_token != '' }}
      uses: "google-github-actions/setup-gcloud@v2"
      with:
        version: ">= 363.0.0"
    - name: "Authenticate using service account credentials"
      if: ${{ steps.auth_with_service_account.outputs.access_token == '' }}
      shell: sh
      run: |
        gcloud auth login --quiet --no-browser --cred-file="${GOOGLE_APPLICATION_CREDENTIALS}"
    - name: "Use gcloud CLI to configure docker"
      if: ${{ steps.auth_with_service_account.outputs.access_token == '' }}
      shell: sh
      env:
        REGISTRY: ${{ inputs.registry }}
      run: "gcloud auth configure-docker $REGISTRY"
    - name: Delete Google Application Credentials file
      if: ${{ inputs.delete_credentials_file == 'true' && env.GOOGLE_APPLICATION_CREDENTIALS != '' }}
      shell: sh
      run: |
        if [ -f "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}" ]; then
          rm -f "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}"
          echo "::notice::Successfully deleted credentials file"
        else
          echo "::warning::Credentials file not found at ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}"
        fi
